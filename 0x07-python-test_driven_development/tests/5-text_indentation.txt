========================================================================
'Test for 5-text_indentation le'
========================================================================
'Funtion to test:   text_indentation(text)'
========================================================================

>>> text_indentation = __import__('5-text_indentation').text_indentation

'text is an integer'
>>> text_indentation(25)
Traceback (most recent call last):
TypeError: text must be a string

>>> text_indentation(str(25.?))
Traceback (most recent call last):
SyntaxError: invalid syntax

'text is a string'
>>> text_indentation("John: Ben? House.")
John:
<BLANKLINE>
Ben?
<BLANKLINE>
House.
<BLANKLINE>

'text is a string with severals blankspaces'
>>> text_indentation("John:		Ben?            House.")
John:
<BLANKLINE>
Ben?
<BLANKLINE>
House.
<BLANKLINE>

'text with .:? without balnkspace'
>>> text_indentation(".:?")
.
<BLANKLINE>
:
<BLANKLINE>
?
<BLANKLINE>

'text is an integer'
>>> text_indentation(1)
Traceback (most recent call last):
...
TypeError: text must be a string

'text is floating'
>>> text_indentation(3.7)
Traceback (most recent call last):
...
TypeError: text must be a string

'text is boolean'
>>> text_indentation(False)
Traceback (most recent call last):
...
TypeError: text must be a string

'text is tuple'
>>> text_indentation((3, 9))
Traceback (most recent call last):
...
TypeError: text must be a string

'text is list'
>>> text_indentation([1, 9])
Traceback (most recent call last):
...
TypeError: text must be a string

'text is dict'
>>> text_indentation({1, 9})
Traceback (most recent call last):
...
TypeError: text must be a string

'text is empty'
>>> text_indentation()
Traceback (most recent call last):
...
TypeError: text_indentation() missing 1 required positional argument: 'text'
